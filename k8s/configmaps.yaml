apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        root /var/www/html;
        index index.php index.html;

        location /admin {
            alias /var/www/html/admin;
            try_files $uri $uri/ /admin/index.html;
        }

        location /cliente {
            alias /var/www/html/cliente;
            try_files $uri $uri/ /cliente/index.html;
        }

        location /api {
            try_files $uri $uri/ /api.php;
        }

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass php-service:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        location / {
            try_files $uri $uri/ =404;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-admin-config
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>HelpDesk - Panel de Administración</title>
        <link rel="stylesheet" href="/admin/css/styles.css">
    </head>
    <body>
        <header>
            <h1>Panel de Administración</h1>
            <p>Gestión completa de tickets</p>
        </header>

        <div class="admin-controls">
            <button id="nuevo-ticket">Nuevo Ticket</button>
            <button id="actualizar">Actualizar Lista</button>
        </div>

        <div id="tickets-container">
            <!-- Los tickets se cargarán aquí dinámicamente -->
        </div>

        <div id="formulario-ticket" style="display: none;">
            <h2>Nuevo Ticket</h2>
            <form id="ticket-form">
                <div class="form-group">
                    <label for="asunto">Asunto:</label>
                    <input type="text" id="asunto" name="asunto" required>
                </div>
                <div class="form-group">
                    <label for="descripcion">Descripción:</label>
                    <textarea id="descripcion" name="descripcion" required></textarea>
                </div>
                <button type="submit">Enviar</button>
                <button type="button" id="cancelar">Cancelar</button>
            </form>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Función para cargar tickets
                function cargarTickets() {
                    fetch('/api/tickets')
                        .then(response => response.json())
                        .then(tickets => {
                            const container = document.getElementById('tickets-container');
                            container.innerHTML = '';
                            
                            tickets.forEach(ticket => {
                                const ticketElement = document.createElement('div');
                                ticketElement.className = 'ticket';
                                ticketElement.innerHTML = `
                                    <h3>${ticket.asunto}</h3>
                                    <p><strong>Descripción:</strong> ${ticket.descripcion}</p>
                                    <p><strong>Estado:</strong> 
                                        <select class="estado-select" data-id="${ticket.id}">
                                            <option value="Abierto" ${ticket.estado === 'Abierto' ? 'selected' : ''}>Abierto</option>
                                            <option value="En progreso" ${ticket.estado === 'En progreso' ? 'selected' : ''}>En progreso</option>
                                            <option value="Cerrado" ${ticket.estado === 'Cerrado' ? 'selected' : ''}>Cerrado</option>
                                        </select>
                                    </p>
                                    <p><strong>Fecha creación:</strong> ${new Date(ticket.fecha_creacion).toLocaleString()}</p>
                                    <p><strong>Fecha actualización:</strong> ${ticket.fecha_actualizacion ? new Date(ticket.fecha_actualizacion).toLocaleString() : 'N/A'}</p>
                                    <button class="eliminar" data-id="${ticket.id}">Eliminar</button>
                                `;
                                container.appendChild(ticketElement);
                            });

                            // Agregar event listeners para los controles
                            document.querySelectorAll('.estado-select').forEach(select => {
                                select.addEventListener('change', function() {
                                    const ticketId = this.getAttribute('data-id');
                                    const nuevoEstado = this.value;
                                    
                                    fetch(`/api/tickets/${ticketId}`, {
                                        method: 'PUT',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        body: JSON.stringify({ estado: nuevoEstado })
                                    })
                                    .then(response => response.json())
                                    .then(data => {
                                        if(data.success) {
                                            alert('Estado actualizado correctamente');
                                            cargarTickets();
                                        }
                                    });
                                });
                            });

                            document.querySelectorAll('.eliminar').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    const ticketId = this.getAttribute('data-id');
                                    
                                    if(confirm('¿Estás seguro de eliminar este ticket?')) {
                                        fetch(`/api/tickets/${ticketId}`, {
                                            method: 'DELETE'
                                        })
                                        .then(response => response.json())
                                        .then(data => {
                                            if(data.success) {
                                                cargarTickets();
                                            }
                                        });
                                    }
                                });
                            });
                        })
                        .catch(error => console.error('Error al cargar tickets:', error));
                }

                // Cargar tickets al inicio
                cargarTickets();

                // Mostrar/ocultar formulario
                document.getElementById('nuevo-ticket').addEventListener('click', function() {
                    document.getElementById('formulario-ticket').style.display = 'block';
                });

                document.getElementById('cancelar').addEventListener('click', function() {
                    document.getElementById('formulario-ticket').style.display = 'none';
                    document.getElementById('ticket-form').reset();
                });

                // Enviar nuevo ticket
                document.getElementById('ticket-form').addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = {
                        asunto: document.getElementById('asunto').value,
                        descripcion: document.getElementById('descripcion').value
                    };

                    fetch('/api/tickets', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if(data.success) {
                            alert('Ticket creado correctamente');
                            document.getElementById('ticket-form').reset();
                            document.getElementById('formulario-ticket').style.display = 'none';
                            cargarTickets();
                        }
                    })
                    .catch(error => console.error('Error:', error));
                });

                // Botón actualizar
                document.getElementById('actualizar').addEventListener('click', function() {
                    cargarTickets();
                });
            });
        </script>
    </body>
    </html>
  styles.css: |
    /* Estilos específicos para el panel de administración */
    body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
    padding: 20px;
    color: #333;
    line-height: 1.6;
    }

    header {
    text-align: center;
    margin-bottom: 30px;
    padding: 20px 0;
    background-color: #343a40;
    color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    h1 {
    font-size: 2.5rem;
    color: #ffffff;
    margin-bottom: 10px;
    }

    p {
    font-size: 1rem;
    margin-top: 5px;
    color: #adb5bd;
    }

    .admin-controls {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
    }

    button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s;
    }

    button:hover {
    background-color: #0056b3;
    }

    #tickets-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 20px;
    }

    .ticket {
    background-color: #fff;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    transition: transform 0.2s ease-in-out;
    position: relative;
    }

    .ticket:hover {
    transform: translateY(-5px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .ticket h3 {
    color: #0056b3;
    margin-bottom: 15px;
    font-size: 1.3rem;
    }

    .ticket p {
    margin-bottom: 10px;
    font-size: 0.95rem;
    color: #495057;
    }

    .ticket strong {
    color: #212529;
    }

    .estado-select {
    padding: 5px 8px;
    border-radius: 4px;
    border: 1px solid #ced4da;
    background-color: #f8f9fa;
    font-size: 0.9rem;
    }

    .eliminar {
    background-color: #dc3545;
    margin-top: 15px;
    width: 100%;
    padding: 8px;
    }

    .eliminar:hover {
    background-color: #c82333;
    }

    #formulario-ticket {
    background-color: #fff;
    padding: 25px;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    margin: 20px auto;
    max-width: 600px;
    }

    #formulario-ticket h2 {
    margin-bottom: 20px;
    color: #007bff;
    text-align: center;
    }

    .form-group {
    margin-bottom: 20px;
    }

    .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: #495057;
    }

    .form-group input,
    .form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 1rem;
    }

    .form-group textarea {
    height: 120px;
    resize: vertical;
    }

    #ticket-form button[type="submit"] {
    background-color: #28a745;
    margin-right: 10px;
    }

    #ticket-form button[type="submit"]:hover {
    background-color: #218838;
    }

    #ticket-form button[type="button"] {
    background-color: #6c757d;
    }

    #ticket-form button[type="button"]:hover {
    background-color: #5a6268;
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-cliente-config
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>HelpDesk - Soporte Técnico</title>
        <link rel="stylesheet" href="/cliente/css/styles.css">
    </head>
    <body>
        <header>
            <h1>Soporte Técnico</h1>
            <p>Sistema de tickets de ayuda</p>
        </header>

        <div class="cliente-controls">
            <button id="nuevo-ticket">Crear Nuevo Ticket</button>
        </div>

        <div id="tickets-container">
            <!-- Los tickets se cargarán aquí dinámicamente -->
        </div>

        <div id="formulario-ticket" style="display: none;">
            <h2>Nuevo Ticket</h2>
            <form id="ticket-form">
                <div class="form-group">
                    <label for="asunto">Asunto:</label>
                    <input type="text" id="asunto" name="asunto" required>
                </div>
                <div class="form-group">
                    <label for="descripcion">Descripción:</label>
                    <textarea id="descripcion" name="descripcion" required></textarea>
                </div>
                <button type="submit">Enviar</button>
                <button type="button" id="cancelar">Cancelar</button>
            </form>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Función para cargar tickets
                function cargarTickets() {
                    fetch('/api/tickets')
                        .then(response => response.json())
                        .then(tickets => {
                            const container = document.getElementById('tickets-container');
                            container.innerHTML = '';
                            
                            tickets.forEach(ticket => {
                                const ticketElement = document.createElement('div');
                                ticketElement.className = 'ticket';
                                ticketElement.innerHTML = `
                                    <h3>${ticket.asunto}</h3>
                                    <p><strong>Descripción:</strong> ${ticket.descripcion}</p>
                                    <p><strong>Estado:</strong> ${ticket.estado}</p>
                                    <p><strong>Fecha creación:</strong> ${new Date(ticket.fecha_creacion).toLocaleString()}</p>
                                    <p><strong>Última actualización:</strong> ${ticket.fecha_actualizacion ? new Date(ticket.fecha_actualizacion).toLocaleString() : 'N/A'}</p>
                                `;
                                container.appendChild(ticketElement);
                            });
                        })
                        .catch(error => console.error('Error al cargar tickets:', error));
                }

                // Cargar tickets al inicio
                cargarTickets();

                // Mostrar/ocultar formulario
                document.getElementById('nuevo-ticket').addEventListener('click', function() {
                    document.getElementById('formulario-ticket').style.display = 'block';
                });

                document.getElementById('cancelar').addEventListener('click', function() {
                    document.getElementById('formulario-ticket').style.display = 'none';
                    document.getElementById('ticket-form').reset();
                });

                // Enviar nuevo ticket
                document.getElementById('ticket-form').addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const formData = {
                        asunto: document.getElementById('asunto').value,
                        descripcion: document.getElementById('descripcion').value
                    };

                    fetch('/api/tickets', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if(data.success) {
                            alert('Ticket creado correctamente');
                            document.getElementById('ticket-form').reset();
                            document.getElementById('formulario-ticket').style.display = 'none';
                            cargarTickets();
                        }
                    })
                    .catch(error => console.error('Error:', error));
                });
            });
        </script>
    </body>
    </html>
  styles.css: |
    /* Estilos específicos para la vista de cliente */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
        padding: 20px;
        color: #333;
        line-height: 1.6;
    }

    header {
        text-align: center;
        margin-bottom: 30px;
        padding: 20px 0;
        background-color: #007bff;
        color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    h1 {
        font-size: 2.5rem;
        color: #ffffff;
        margin-bottom: 10px;
    }

    p {
        font-size: 1rem;
        margin-top: 5px;
        color: #e2edf8;
    }

    .cliente-controls {
        margin-bottom: 30px;
        text-align: center;
    }

    button {
        background-color: #17a2b8;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #138496;
    }

    #tickets-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
        gap: 20px;
    }

    .ticket {
        background-color: #fff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s ease-in-out;
    }

    .ticket:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .ticket h3 {
        color: #007bff;
        margin-bottom: 15px;
        font-size: 1.3rem;
    }

    .ticket p {
        margin-bottom: 10px;
        font-size: 0.95rem;
        color: #495057;
    }

    .ticket strong {
        color: #212529;
    }

    #formulario-ticket {
        background-color: #fff;
        padding: 25px;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        margin: 20px auto;
        max-width: 600px;
    }

    #formulario-ticket h2 {
        margin-bottom: 20px;
        color: #007bff;
        text-align: center;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
        color: #495057;
    }

    .form-group input,
    .form-group textarea {
        width: 100%;
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 1rem;
    }

    .form-group textarea {
        height: 120px;
        resize: vertical;
    }

    #ticket-form button[type="submit"] {
        background-color: #28a745;
        margin-right: 10px;
    }

    #ticket-form button[type="submit"]:hover {
        background-color: #218838;
    }

    #ticket-form button[type="button"] {
        background-color: #6c757d;
    }

    #ticket-form button[type="button"]:hover {
        background-color: #5a6268;
    }

    /* Estado visual de los tickets */
    .ticket[data-estado="Abierto"] {
        border-left: 5px solid #ffc107;
    }

    .ticket[data-estado="En progreso"] {
        border-left: 5px solid #17a2b8;
    }

    .ticket[data-estado="Cerrado"] {
        border-left: 5px solid #28a745;
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: php-config
data:
  api.php: |
    <?php
    header('Content-Type: application/json');

    // Conexión a la base de datos
    $conexion = new mysqli("db", "root", "root", "helpdesk");

    if ($conexion->connect_error) {
        http_response_code(500);
        echo json_encode(["error" => "Error de conexión: " . $conexion->connect_error]);
        exit;
    }

    // Obtener el método HTTP
    $method = $_SERVER['REQUEST_METHOD'];

    // Manejar diferentes rutas y métodos
    $path = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);
    $parts = explode('/', $path);
    $endpoint = $parts[count($parts) - 1];

    if ($endpoint === 'tickets') {
        // Obtener ID si existe
        $id = isset($parts[3]) ? intval($parts[3]) : null;
        
        switch ($method) {
            case 'GET':
                // Determinar si es admin (simulado)
                $esAdmin = strpos($_SERVER['HTTP_REFERER'] ?? '', '/admin/') !== false;
                
                if ($id) {
                    // Obtener un ticket específico
                    $stmt = $conexion->prepare("SELECT * FROM tickets WHERE id = ?");
                    $stmt->bind_param("i", $id);
                    $stmt->execute();
                    $result = $stmt->get_result();
                    $ticket = $result->fetch_assoc();
                    echo json_encode($ticket);
                } else {
                    // Obtener todos los tickets
                    if ($esAdmin) {
                        $sql = "SELECT * FROM tickets";
                    } else {
                        $sql = "SELECT * FROM tickets WHERE estado IN ('Abierto', 'En progreso')";
                    }
                    $resultado = $conexion->query($sql);
                    $tickets = [];
                    while ($fila = $resultado->fetch_assoc()) {
                        $tickets[] = $fila;
                    }
                    echo json_encode($tickets);
                }
                break;
                
            case 'POST':
                // Crear nuevo ticket
                $data = json_decode(file_get_contents('php://input'), true);
                $asunto = $data['asunto'];
                $descripcion = $data['descripcion'];
                
                $stmt = $conexion->prepare("INSERT INTO tickets (asunto, descripcion) VALUES (?, ?)");
                $stmt->bind_param("ss", $asunto, $descripcion);
                
                if ($stmt->execute()) {
                    echo json_encode(["success" => true, "id" => $conexion->insert_id]);
                } else {
                    echo json_encode(["error" => $conexion->error]);
                }
                break;
                
            case 'PUT':
                // Actualizar ticket (admin)
                $data = json_decode(file_get_contents('php://input'), true);
                $estado = $data['estado'];
                
                $stmt = $conexion->prepare("UPDATE tickets SET estado = ? WHERE id = ?");
                $stmt->bind_param("si", $estado, $id);
                
                if ($stmt->execute()) {
                    echo json_encode(["success" => true]);
                } else {
                    echo json_encode(["error" => $conexion->error]);
                }
                break;
                
            case 'DELETE':
                // Eliminar ticket (admin)
                $stmt = $conexion->prepare("DELETE FROM tickets WHERE id = ?");
                $stmt->bind_param("i", $id);
                
                if ($stmt->execute()) {
                    echo json_encode(["success" => true]);
                } else {
                    echo json_encode(["error" => $conexion->error]);
                }
                break;
                
            default:
                http_response_code(405);
                echo json_encode(["error" => "Método no permitido"]);
        }
    } else {
        http_response_code(404);
        echo json_encode(["error" => "Endpoint no encontrado"]);
    }

    $conexion->close();
    ?>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-config
data:
  init.sql: |
   -- Crear base de datos si no existe
    CREATE DATABASE IF NOT EXISTS helpdesk;
    USE helpdesk;

    -- Crear tabla de tickets
    CREATE TABLE IF NOT EXISTS tickets (
    id INT AUTO_INCREMENT PRIMARY KEY,
    asunto VARCHAR(100) NOT NULL,
    descripcion TEXT NOT NULL,
    estado ENUM('Abierto', 'En progreso', 'Cerrado') DEFAULT 'Abierto',
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );

    -- Insertar algunos tickets de prueba
    INSERT INTO tickets (asunto, descripcion, estado) VALUES
    ('Error de red', 'El equipo no puede conectarse a la red WiFi.', 'Abierto'),
    ('Fallo en impresora', 'La impresora de la oficina 2 muestra error de papel atascado.', 'En progreso'),
    ('Actualización de software', 'Solicito actualización del antivirus.', 'Cerrado');